import { CLIENT_ID, TOKEN_ENDPOINT, API_BASE_URL } from '../constants';
import { SpotifyUser, SpotifySearchResponse, SpotifyPlaylist } from '../types';

/**
 * Refreshes the Spotify access token using the stored refresh token.
 * Updates localStorage and dispatches an event for the UI to update.
 */
async function refreshAccessToken(): Promise<string> {
    const refreshToken = localStorage.getItem('spotify_refresh_token');
    if (!refreshToken) {
        throw new Error('No refresh token available. Please log in again.');
    }

    const response = await fetch(TOKEN_ENDPOINT, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
            grant_type: 'refresh_token',
            refresh_token: refreshToken,
            client_id: CLIENT_ID,
        }),
    });

    if (!response.ok) {
        // If refresh fails, the refresh token is likely invalid. Clear session.
        localStorage.removeItem('spotify_access_token');
        localStorage.removeItem('spotify_token_expiry');
        localStorage.removeItem('spotify_refresh_token');
        throw new Error('Session has expired. Please log in again.');
    }
    
    const data = await response.json();
    const expiryTime = new Date().getTime() + data.expires_in * 1000;
    localStorage.setItem('spotify_access_token', data.access_token);
    localStorage.setItem('spotify_token_expiry', expiryTime.toString());

    if (data.refresh_token) {
        localStorage.setItem('spotify_refresh_token', data.refresh_token);
    }
    
    // Dispatch event so the app state can be updated
    window.dispatchEvent(new CustomEvent('tokenRefreshed', {
      detail: { accessToken: data.access_token }
    }));

    return data.access_token;
}


async function spotifyFetch(url: string, token: string, options: RequestInit = {}): Promise<any> {
    
    const makeRequest = async (currentToken: string) => {
        return fetch(`${API_BASE_URL}${url}`, {
            ...options,
            headers: {
                ...options.headers,
                'Authorization': `Bearer ${currentToken}`,
                'Content-Type': 'application/json',
            }
        });
    };
    
    let response = await makeRequest(token);

    if (response.status === 401) {
        try {
            console.log('Access token expired, attempting to refresh...');
            const newToken = await refreshAccessToken();
            response = await makeRequest(newToken); // Retry the request with the new token
        } catch (error) {
            // If refresh fails, propagate the error to trigger a logout
            throw error;
        }
    }

    if (response.status === 204 || response.status === 201) {
        return response;
    }
    
    if (!response.ok) {
        const error = await response.json();
        const errorMessage = error.error?.message || 'An unknown Spotify API error occurred';
        throw new Error(`Spotify API Error: ${errorMessage}`);
    }
    return response.json();
}


export const getUserProfile = (token: string): Promise<SpotifyUser> => {
    return spotifyFetch('/me', token);
};

export const searchTrack = (token: string, query: string): Promise<SpotifySearchResponse> => {
    const params = new URLSearchParams({
        q: query,
        type: 'track',
        limit: '1',
    });
    return spotifyFetch(`/search?${params.toString()}`, token);
};


export const createPlaylist = (token: string, userId: string, name: string): Promise<SpotifyPlaylist> => {
    return spotifyFetch(`/users/${userId}/playlists`, token, {
        method: 'POST',
        body: JSON.stringify({
            name: name,
            description: 'Generated by GOA Playlist Generator',
            public: false,
        }),
    });
}

export const addTracksToPlaylist = (token: string, playlistId: string, trackUris: string[]): Promise<Response> => {
     // Spotify API can only handle 100 tracks per request
    const CHUNK_SIZE = 100;
    const promises = [];
    for (let i = 0; i < trackUris.length; i += CHUNK_SIZE) {
        const chunk = trackUris.slice(i, i + CHUNK_SIZE);
        const promise = spotifyFetch(`/playlists/${playlistId}/tracks`, token, {
            method: 'POST',
            body: JSON.stringify({
                uris: chunk,
            }),
        });
        promises.push(promise);
    }
    return Promise.all(promises).then(responses => responses[0]);
}